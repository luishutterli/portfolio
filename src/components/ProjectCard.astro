---
import { type CollectionEntry } from "astro:content";

interface Props {
  project: CollectionEntry<"projects">;
  showImage?: boolean;
  showFullDescription?: boolean;
}

const { project, showImage = true, showFullDescription = false } = Astro.props;
---

<article class="group bg-white hover:shadow-xl border border-neutral-light/50 hover:border-primary/30 rounded-lg h-full overflow-hidden transition-all hover:-translate-y-2 duration-300">
  <div class="p-3">
    {
      showImage && project.data.image && (
        <div class="relative bg-background-light mb-2 rounded-lg aspect-video overflow-hidden">
          <img
            src={project.data.image}
            alt={project.data.name}
            loading="lazy"
            class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
            transition:name={`project-image-${project.id}`}
          />
        </div>
      )
    }
    

    <div class="mb-1.5">
      <div class="flex justify-between items-start gap-3 mb-1.5">
        <h3 class="font-medium text-slate-900 text-lg leading-tight">
          <a
            href={`/projects/${project.id}`}
            class="text-slate-900 hover:text-primary no-underline transition-colors duration-200"
            transition:name={`project-title-${project.id}`}
          >
            {project.data.name}
          </a>
        </h3>
        
        <div class="flex flex-shrink-0 items-center gap-1.5">
          <span
            class={`px-2 py-1 rounded text-xs ${
              project.data.state === "Fertig"
                ? "bg-secondary/10 text-secondary-hover"
                : "bg-accent/10 text-accent"
            }`}
          >
            {project.data.state}
          </span>
          {
            project.data.featured && (
              <span class="bg-primary/10 px-2 py-1 rounded font-medium text-primary text-xs">
                â˜…
              </span>
            )
          }
        </div>
      </div>
      

      <div class="flex flex-wrap gap-1.5 mb-1.5">
        {
          project.data.tags.slice(0, 4).map((tag: string) => (
            <span class="bg-background-light px-2 py-1 border border-neutral-light/30 rounded text-neutral text-xs">
              {tag}
            </span>
          ))
        }
        {project.data.tags.length > 4 && (
          <span class="bg-background-light px-2 py-1 border border-neutral-light/30 rounded text-neutral-light text-xs">
            +{project.data.tags.length - 4}
          </span>
        )}
      </div>
    </div>


    <p class="mb-2 text-neutral text-sm leading-relaxed">
      {
        showFullDescription
          ? project.data.description
          : project.data.description.length > 100
            ? project.data.description.substring(0, 100) + "..."
            : project.data.description
      }
    </p>


    <div class="flex justify-between items-center">
      <a
        href={`/projects/${project.id}`}
        class="inline-flex items-center gap-1 font-medium text-primary hover:text-primary-hover text-sm transition-colors group-hover:translate-x-1 duration-200 transform"
      >
        Details ansehen 
        <svg class="w-4 h-4 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
        </svg>
      </a>
    </div>
  </div>
</article>
